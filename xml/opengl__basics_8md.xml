<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="opengl__basics_8md" kind="file" language="Markdown">
    <compoundname>opengl_basics.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>OpenGL<sp/>Triangle<sp/>Program</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>1.<sp/>Initialize<sp/>OpenGL<sp/>and<sp/>Create<sp/>a<sp/>Window</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>**Set<sp/>up<sp/>a<sp/>windowing<sp/>library<sp/>(e.g.,<sp/>GLFW/GLUT)**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">2.<sp/>**Code<sp/>snippet<sp/>for<sp/>window<sp/>creation:**</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;GLFW/glfw3.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>GLFW</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!glfwInit())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Failed<sp/>to<sp/>initialize<sp/>GLFW&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Create<sp/>a<sp/>window</highlight></codeline>
<codeline><highlight class="normal">GLFWwindow*<sp/>window<sp/>=<sp/>glfwCreateWindow(800,<sp/>600,<sp/>&quot;Triangle<sp/>Program&quot;,<sp/>nullptr,<sp/>nullptr);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!window)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Failed<sp/>to<sp/>create<sp/>GLFW<sp/>window&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>glfwTerminate();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">glfwMakeContextCurrent(window);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Debugging<sp/>Tip:**<sp/>Check<sp/>for<sp/>errors<sp/>after<sp/>each<sp/>GLFW<sp/>call<sp/>using:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!glfwInit())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;GLFW<sp/>Initialization<sp/>Error!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>2.<sp/>Define<sp/>Vertex<sp/>Data</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Vertices<sp/>of<sp/>the<sp/>triangle<sp/>are<sp/>in<sp/>**Normalized<sp/>Device<sp/>Coordinates<sp/>(NDC)**.</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">float<sp/>vertices[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-0.5f,<sp/>-0.5f,<sp/>0.0f,<sp/>//<sp/>Bottom-left</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>0.5f,<sp/>-0.5f,<sp/>0.0f,<sp/>//<sp/>Bottom-right</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>0.0f,<sp/><sp/>0.5f,<sp/>0.0f<sp/><sp/>//<sp/>Top-center</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>3.<sp/>Generate<sp/>and<sp/>Bind<sp/>Vertex<sp/>Buffer<sp/>Object<sp/>(VBO)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Store<sp/>vertex<sp/>data<sp/>in<sp/>GPU<sp/>memory.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>VBO;</highlight></codeline>
<codeline><highlight class="normal">glGenBuffers(1,<sp/>&amp;VBO);</highlight></codeline>
<codeline><highlight class="normal">glBindBuffer(GL_ARRAY_BUFFER,<sp/>VBO);</highlight></codeline>
<codeline><highlight class="normal">glBufferData(GL_ARRAY_BUFFER,<sp/>sizeof(vertices),<sp/>vertices,<sp/>GL_STATIC_DRAW);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Notes:**</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`GL_STATIC_DRAW`<sp/>is<sp/>used<sp/>because<sp/>the<sp/>data<sp/>doesnâ€™t<sp/>change<sp/>often.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Use<sp/>`glGetError()`<sp/>after<sp/>OpenGL<sp/>calls<sp/>to<sp/>detect<sp/>errors.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>4.<sp/>Create<sp/>and<sp/>Compile<sp/>Shaders</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Vertex<sp/>Shader</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">const<sp/>char*<sp/>vertexShaderSource<sp/>=<sp/>R&quot;(</highlight></codeline>
<codeline><highlight class="normal">#version<sp/>330<sp/>core</highlight></codeline>
<codeline><highlight class="normal">layout<sp/>(location<sp/>=<sp/>0)<sp/>in<sp/>vec3<sp/>aPos;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gl_Position<sp/>=<sp/>vec4(aPos,<sp/>1.0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">)&quot;;</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>vertexShader<sp/>=<sp/>glCreateShader(GL_VERTEX_SHADER);</highlight></codeline>
<codeline><highlight class="normal">glShaderSource(vertexShader,<sp/>1,<sp/>&amp;vertexShaderSource,<sp/>nullptr);</highlight></codeline>
<codeline><highlight class="normal">glCompileShader(vertexShader);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Check<sp/>for<sp/>compilation<sp/>errors</highlight></codeline>
<codeline><highlight class="normal">int<sp/>success;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>infoLog[512];</highlight></codeline>
<codeline><highlight class="normal">glGetShaderiv(vertexShader,<sp/>GL_COMPILE_STATUS,<sp/>&amp;success);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!success)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>glGetShaderInfoLog(vertexShader,<sp/>512,<sp/>nullptr,<sp/>infoLog);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\n&quot;<sp/>&lt;&lt;<sp/>infoLog<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Fragment<sp/>Shader</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">const<sp/>char*<sp/>fragmentShaderSource<sp/>=<sp/>R&quot;(</highlight></codeline>
<codeline><highlight class="normal">#version<sp/>330<sp/>core</highlight></codeline>
<codeline><highlight class="normal">out<sp/>vec4<sp/>FragColor;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>FragColor<sp/>=<sp/>vec4(1.0,<sp/>0.5,<sp/>0.2,<sp/>1.0);<sp/>//<sp/>Orange<sp/>color</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">)&quot;;</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>fragmentShader<sp/>=<sp/>glCreateShader(GL_FRAGMENT_SHADER);</highlight></codeline>
<codeline><highlight class="normal">glShaderSource(fragmentShader,<sp/>1,<sp/>&amp;fragmentShaderSource,<sp/>nullptr);</highlight></codeline>
<codeline><highlight class="normal">glCompileShader(fragmentShader);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Check<sp/>for<sp/>errors<sp/>as<sp/>above</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>5.<sp/>Link<sp/>Shaders<sp/>into<sp/>a<sp/>Shader<sp/>Program</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>shaderProgram<sp/>=<sp/>glCreateProgram();</highlight></codeline>
<codeline><highlight class="normal">glAttachShader(shaderProgram,<sp/>vertexShader);</highlight></codeline>
<codeline><highlight class="normal">glAttachShader(shaderProgram,<sp/>fragmentShader);</highlight></codeline>
<codeline><highlight class="normal">glLinkProgram(shaderProgram);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Check<sp/>for<sp/>linking<sp/>errors</highlight></codeline>
<codeline><highlight class="normal">glGetProgramiv(shaderProgram,<sp/>GL_LINK_STATUS,<sp/>&amp;success);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!success)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>glGetProgramInfoLog(shaderProgram,<sp/>512,<sp/>nullptr,<sp/>infoLog);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;ERROR::SHADER::PROGRAM::LINKING_FAILED\n&quot;<sp/>&lt;&lt;<sp/>infoLog<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">glUseProgram(shaderProgram);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Delete<sp/>shaders<sp/>after<sp/>linking</highlight></codeline>
<codeline><highlight class="normal">glDeleteShader(vertexShader);</highlight></codeline>
<codeline><highlight class="normal">glDeleteShader(fragmentShader);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>6.<sp/>Create<sp/>and<sp/>Configure<sp/>Vertex<sp/>Array<sp/>Object<sp/>(VAO)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>VAOs<sp/>store<sp/>vertex<sp/>attributes<sp/>and<sp/>buffer<sp/>bindings.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>VAO;</highlight></codeline>
<codeline><highlight class="normal">glGenVertexArrays(1,<sp/>&amp;VAO);</highlight></codeline>
<codeline><highlight class="normal">glBindVertexArray(VAO);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Bind<sp/>the<sp/>VBO<sp/>to<sp/>the<sp/>VAO</highlight></codeline>
<codeline><highlight class="normal">glBindBuffer(GL_ARRAY_BUFFER,<sp/>VBO);</highlight></codeline>
<codeline><highlight class="normal">glVertexAttribPointer(0,<sp/>3,<sp/>GL_FLOAT,<sp/>GL_FALSE,<sp/>3<sp/>*<sp/>sizeof(float),<sp/>(void*)0);</highlight></codeline>
<codeline><highlight class="normal">glEnableVertexAttribArray(0);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Note:**<sp/>Ensure<sp/>the<sp/>VAO<sp/>is<sp/>bound<sp/>before<sp/>configuring<sp/>vertex<sp/>attributes.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>7.<sp/>Render<sp/>Loop</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(!glfwWindowShouldClose(window))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Clear<sp/>screen</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>glClearColor(0.2f,<sp/>0.3f,<sp/>0.3f,<sp/>1.0f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>glClear(GL_COLOR_BUFFER_BIT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Draw<sp/>the<sp/>triangle</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>glUseProgram(shaderProgram);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>glBindVertexArray(VAO);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>glDrawArrays(GL_TRIANGLES,<sp/>0,<sp/>3);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Swap<sp/>buffers<sp/>and<sp/>poll<sp/>events</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>glfwSwapBuffers(window);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>glfwPollEvents();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>8.<sp/>Cleanup<sp/>Resources</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">glDeleteVertexArrays(1,<sp/>&amp;VAO);</highlight></codeline>
<codeline><highlight class="normal">glDeleteBuffers(1,<sp/>&amp;VBO);</highlight></codeline>
<codeline><highlight class="normal">glDeleteProgram(shaderProgram);</highlight></codeline>
<codeline><highlight class="normal">glfwTerminate();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>9.<sp/>Debugging<sp/>Tools</highlight></codeline>
<codeline><highlight class="normal">1.<sp/>**OpenGL<sp/>Error<sp/>Checking:**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>GLenum<sp/>err;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>while<sp/>((err<sp/>=<sp/>glGetError())<sp/>!=<sp/>GL_NO_ERROR)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;OpenGL<sp/>Error:<sp/>&quot;<sp/>&lt;&lt;<sp/>err<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>```</highlight></codeline>
    </programlisting>
    <location file="opengl_basics.md"/>
  </compounddef>
</doxygen>
